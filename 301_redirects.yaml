openapi: 3.1.0
info:
  title: 301 Redirects
  description: API endpoints for managing 301 redirects in ShopWired.
  version: "1.0.0"

servers:
  - url: https://api.ecommerceapi.uk/v1
    description: Production API server

paths:
  /redirects:
    get:
      summary: List 301 redirects
      description: "Retrieves a list of 301 redirects, with optional filtering by path."
      operationId: listRedirects
      security:
        - BasicAuth: []
      parameters:
        - name: count
          in: query
          description: "Number of records to retrieve (default: 50, max: 100)."
          required: false
          schema:
            type: integer
            default: 50
            maximum: 100
        - name: offset
          in: query
          description: "Number of records to skip."
          required: false
          schema:
            type: integer
            default: 0
        - name: path
          in: query
          description: "Filter redirects by the exact old path."
          required: false
          schema:
            type: string
        - name: fields
          in: query
          description: "Comma-separated list of fields to include in the response."
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "A list of 301 redirects."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Redirect"
        "400":
          description: "Invalid request parameters."
        "401":
          description: "Unauthorized. Invalid or missing API key."
        "500":
          description: "Server error."
    post:
      summary: Create a new 301 redirect
      description: "Creates a new 301 redirect."
      operationId: createRedirect
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RedirectCreate"
      responses:
        "201":
          description: "301 redirect created successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Redirect"
        "400":
          description: "Invalid request data."
        "401":
          description: "Unauthorized. Invalid or missing API key."
        "409":
          description: "A redirect for the old path already exists."
        "500":
          description: "Server error."

  /redirects/count:
    get:
      summary: Get total 301 redirect count
      description: "Retrieves the total number of 301 redirects."
      operationId: getRedirectCount
      security:
        - BasicAuth: []
      parameters:
        - name: path
          in: query
          description: "Filter by exact old path."
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "The total count of 301 redirects."
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: "Total number of redirects."
                    example: 104
        "400":
          description: "Invalid request parameters."
        "401":
          description: "Unauthorized. Invalid or missing API key."
        "500":
          description: "Server error."

  /redirects/{id}:
    get:
      summary: Get a specific 301 redirect
      description: "Retrieves a single 301 redirect by ID."
      operationId: getRedirectById
      security:
        - BasicAuth: []
      parameters:
        - name: id
          in: path
          description: "The unique identifier of the redirect."
          required: true
          schema:
            type: integer
        - name: fields
          in: query
          description: "Comma-separated list of fields to include in the response."
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "The 301 redirect details."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Redirect"
        "400":
          description: "Invalid request parameters."
        "401":
          description: "Unauthorized. Invalid or missing API key."
        "404":
          description: "Redirect not found."
        "500":
          description: "Server error."

    delete:
      summary: Delete a 301 redirect
      description: "Deletes a 301 redirect by ID."
      operationId: deleteRedirect
      security:
        - BasicAuth: []
      parameters:
        - name: id
          in: path
          description: "The unique identifier of the redirect."
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: "Redirect deleted successfully."
        "400":
          description: "Invalid request parameters."
        "401":
          description: "Unauthorized. Invalid or missing API key."
        "404":
          description: "Redirect not found."
        "500":
          description: "Server error."

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

  schemas:
    Redirect:
      type: object
      properties:
        id:
          type: integer
          description: "Unique identifier for the redirect."
        oldPath:
          type: string
          description: "The old URL path to redirect from (must start with '/')."
        newPath:
          type: string
          description: "The new URL path to redirect to (must start with '/')."
        createdAt:
          type: string
          format: date-time
          description: "Timestamp when the redirect was created."
    RedirectCreate:
      type: object
      required:
        - oldPath
        - newPath
      properties:
        oldPath:
          type: string
          description: "The old URL path to redirect from (must start with '/')."
        newPath:
          type: string
          description: "The new URL path to redirect to (must start with '/')."
